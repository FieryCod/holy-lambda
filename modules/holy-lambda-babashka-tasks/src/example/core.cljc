(ns example.core
  (:gen-class)
  (:require
   [fierycod.holy-lambda.retriever :as r]
   [fierycod.holy-lambda.interceptor :as i]
   [fierycod.holy-lambda.agent :as agent]
   [clojure.string :as str]
   [fierycod.holy-lambda.util :as u]
   [fierycod.holy-lambda.native-runtime :as native]
   [fierycod.holy-lambda.response :as hr]
   [fierycod.holy-lambda.core :as h]))

(i/definterceptor LogIncommingRequest
  {:enter (fn [request]
            (println "Log incomming request:" request)
            request)})


(h/deflambda ExampleLambda <
  {:interceptors [LogIncommingRequest]}
  [request]
  (hr/png-image
   "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"))

(h/deflambda ExampleLambdav2 <
  [request]
  (hr/text "Test another invocation"))

(native/entrypoint [#'ExampleLambda #'ExampleLambdav2])

(agent/in-context
 (println "In agent context"))

;; (defn initialize-at-build-time-list
;;   [& args]
;;   (println
;;    (->> (map ns-name (all-ns))
;;         (remove #(clojure.string/starts-with? % "clojure"))
;;         (map #(clojure.string/split (str %) #"\."))
;;         (keep butlast)
;;         (map #(clojure.string/join "." %))
;;         distinct
;;         (map munge)
;;         (cons "clojure")
;;         (clojure.string/join ","))))
