#+TITLE: Benchmark
#+DATE: <2021-08-02 Mon>
#+AUTHOR: Karol WÃ³jcik<karol.wojcik@tuta.io

#+begin_src python :session pb1 :results value raw :exports none
from scipy.stats import zscore
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tabulate import tabulate

def read_csv(filename):
    return pd.read_csv("./results/" + filename + ".csv")

def into_dict(seq):
    dict = {}
    for k, v in seq:
        dict[k] = v
    return dict

alpha = ["A", "B", "C", "D", "E", "F", "G", "H", \
         "I", "J", "K", "L", "M", "N", "O", "P", \
         "Q", "R", "S", "T", "U", "V","W", "X", "Y", "Z"]

def ds_with_substitute_names(ds):
    dict = {}
    fn_names = sorted(set(ds["function_name"]))
    replace_dict = into_dict([[fn, alpha[i]] for i, fn in zip(range(len(fn_names)), fn_names)])
    new_column = ds["function_name"].replace(replace_dict)
    ds_new = ds.copy()
    ds_new["function_name"] = new_column

    return ds, ds_new, fn_names

def file_to_dses(filename):
    return ds_with_substitute_names(read_csv(filename))

def filter_by_z_score(group):
  abs_zscore = np.abs(zscore(group))
  filtered = (abs_zscore < 3)

  return group[filtered]

def groups_to_describe_table(groups):
    table = []
    for name, group in groups:
        group["time_s"] = filter_by_z_score(group["time_s"])
        gds = group.describe()
        series = group["status"].apply(lambda x: True if x == 200 else False)
        table.append([
            name,
            gds["time_s"][1],  # #mean
            gds["time_s"][2],  # #std
            gds["time_s"][3],  # #min
            gds["time_s"][7],  # #max
            gds["time_s"][4],  # #25%
            gds["time_s"][5],  # #50%
            gds["time_s"][6],  # #75%
            str((len(series[series == True].index) / 1000) * 100) + "%"
        ])
    return table

def boxplots(groups, coldstarts=True):
  for i, [name, group] in zip(range(len(groups)), groups):
      fig = plt.figure(i)
      plt.boxplot(group["time_s"], showfliers=False)
      plt.title("Boxplot: " + name + ",v:" + ("cold" if coldstarts else "warm") + ",memory: " + str(group["memory_size"].values[0]) + "MB")
      plt.ylabel("Time [s]")
      plt.xlabel(name)
      fig.savefig("results/img/" + name + ("cold" if coldstarts else "warm") + ".png", dpi=100)
      fig.clear()
      fig.clf()
      plt.clf()
      plt.close()

def boxplot_all(filename, title):
  _, df_new, fn_names = file_to_dses(filename)
  fig, ax = plt.subplots(figsize=(10,8))
  df_new.boxplot(column=["time_s"], by='function_name', ax=ax, showfliers=False)
  ax.set_ylabel("Time [s]")
  ax.set_xlabel("Function name")
  plt.title(title)
  plt.suptitle('')
  ax.legend([str(alf) + " = " + fn for alf, fn in zip(alpha[:len(fn_names)], fn_names)], handletextpad=0, handlelength=0, framealpha=0.3, fontsize="x-small", loc=1)
  fig.savefig("./results/img/" + filename + "all.png", dpi=100)
  fig.clear()
  fig.clf()
  plt.clf()
  plt.close()

def ds_describe_table(ds):
    return tabulate(
        groups_to_describe_table(ds.groupby(by="function_name")),
        headers = ["mean", "std", "min", "max", "25%", "50%", "75%", "status 200 in %"],
        tablefmt="orgtbl"
    )
#+end_src

#+RESULTS:

* About the benchmark
Following synthetic benchmark aggregates the results of running sample "Hello World" program on curated list of AWS Lambda runtimes:

1. Official AWS Node.js runtime (Nodejs v10, Nodejs v12, Nodejs v14)
2. Official AWS Ruby runtime (ruby2.5, ruby2.7)
3. Official AWS Python runtime (python2.7, python3.8)
4. Official AWS Rust runtime (runtime v0.3.0)
5. Official AWS Java runtime (Java8, Java11)
6. Official AWS DotnetCore runtime (dotnetcore2.1)
7. Community Haskell runtime (aws-lambda-haskell-runtime 1.1.1)
8. Official AWS Golang runtime (golang1.x)
9. Custom Clojure on Babashka Runtime (Babashka 0.4.6) (HL)
10. Clojure on Official AWS Java runtime (Java8, Java11)
11. Clojure on Custom Clojure runtime (Java8, Java11) (HL)
12. Official AWS Java Main Function adapter. Native compiled with GraalVM (Java8 GraalVM CE 21.1.0, Java11 GraalVM CE 21.1.0)
13. Clojure on Custom Clojure runtime. Native compiled with GraalVM (Java8 GraalVM CE 21.1.0, Java11 GraalVM CE 21.1.0) (HL)

Benchmark has been crafted to compare the results of the already established AWS Lambda runtimes with the ones proposed by the ~Holy Lambda~ microframework. In order to make the comparision fair, we limited the scope of the test to return the "Hello world!" text from each Lambda. Although the test might seem to simple and naive it's truly not.

Architecture of every runtime more or less follows the official AWS recommendations for creating a Custom Runtime. This means each of the presented runtime:

1. Fetches the new event from the API gateway
2. Decodes JSON event to a structure which might be read by the user handler
3. Handler returns a structure ~{"body": "Hello world!", "Content-Type": "plain/text"}~ which is then encoded to valid json string and POST to an API Gateway.

The test is both minimal enough, complete and fair, because we compare only the runtimes work.
* Expectations
1. Holy Lambda runtimes should be as fast as the others.
2. Holy Lambda runtimes should be statistically stable.
3. Holy Lambda runtimes should work without the errors under the same load as other runtimes.
4. Holy Lambda runtimes should have approximetely same memory usage characteristics as other runtimes.
* Analysed parameters
In the test the following parameters are closely studied:
- memory usage of each runtime (mean, max, min, std)
- percentage of successful responses of each runtime
- cold start time, processing, and response (mean, max, min, std, 25%, 50%, 75%)
- warm start time, processing, and response (mean, max, min, std, 25%, 50%, 75%)
- cold start time, and processing (without response)
- warm start time, and processing (without response)
- artifacts size
* Lambda functions
1. /ClojureClojureJava8Runtime-{MemorySize}/ - HL Custom Clojure runtime on Java8
2. /ClojureClojureJava11Runtime-{MemorySize}/ - HL Custom Clojure runtime on Java11
3. /ClojureJava8Runtime-{MemorySize}/ - Clojure on official Java runtime. Java8
4. /ClojureJava11Runtime-{MemorySize}/ - Clojure on official Java runtime. Java11
5. /ClojureGraalVM211CE8-{MemorySize}/ - HL Custom Clojure runtime native compiled with GraalVM 21.1 on Java8
6. /ClojureGraalVM211CE11-{MemorySize}/ - HL Custom Clojure runtime native compiled with GraalVM 21.1 on Java11
7. /Java8Runtime-{MemorySize}/ - Official AWS Lambda Java runtime. Java8
8. /Java11Runtime-{MemorySize}/ - Official AWS Lambda Java runtime. Java11
9. /JavaGraalVM211CE8-{MemorySize}/ - Custom Java runtime native compiled with GraalVM 21.1 on Java8
10. /JavaGraalVM211CE11-{MemorySize}/ - Custom Java runtime native compiled with GraalVM 21.1 on Java11
11. /ClojureOnBabashkaRuntime-{MemorySize}/ - Custom Clojure runtime running on Babashka (0.4.6)
12. /Nodejs14Runtime-{MemorySize}/ - Official Node.js runtime (v14)
13. /Nodejs12Runtime-{MemorySize}/ - Official Node.js runtime (v12)
14. /Nodejs10Runtime-{MemorySize}/ - Official Node.js runtime (v10)
15. /PythonRuntime38-{MemorySize}/ - Official Python runtime (Python3.8)
16. /PythonRuntime27-{MemorySize}/ - Official Python runtime (Python2.7)
17. /RubyRuntime25-{MemorySize}/ - Official Ruby runtime (ruby2.5)
18. /RubyRuntime27-{MemorySize}/ - Official Ruby runtime (ruby2.7)
19. /GolangRuntime-{MemorySize}/ - Official Golang runtime (go1.x)
20. /RustRuntime-{MemorySize}/ - Official Rust runtime (v0.3.0)
21. /HaskellRuntime-{MemorySize}/ - Community Haskell runtime (v1.1.1)
22. /CsharpRuntime-{MemorySize}/ - Official DotnetCore runtime (v2.1)

Function name changes according to dynamic MemorySize parameter, where MemorySize is one of {128, 512, 1024, 2048}.
* Artifacts size

Artifacts size are the same for all of the memory variants.

#+CAPTION: Function to it's artifact size in (KB)
|-----------------------------+--------------------|
| Function Name               | Artifact size (KB) |
|-----------------------------+--------------------|
| RubyRuntime25               | ~=0.236            |
| RubyRuntime27               | ~=0.236            |
| PythonRuntime27             | ~=0.248            |
| PythonRuntime38             | ~=0.248            |
| Nodejs10Runtime             | ~=0.263            |
| Nodejs12Runtime             | ~=0.263            |
| Nodejs14Runtime             | ~=0.263            |
| CsharpRuntime-128           | ~=204.6            |
| GolangRuntime               | ~=67500            |
| RustRuntime                 | ~=1500             |
| HaskellRuntime              | ~=2400             |
| Java8Runtime                | ~=3200             |
| Java11Runtime               | ~=3200             |
| JavaGraalVM211CE8           | ~=9500             |
| JavaGraalVM211CE11          | ~=12700            |
| ClojureJava8Runtime         | ~=6600             |
| ClojureJava11Runtime        | ~=6700             |
| ClojureClojureJava8Runtime  | ~=237000           |
| ClojureClojureJava11Runtime | ~=340000           |
| ClojureOnBabashkaRuntime    | ~=0.270            |
| ClojureGraalVM211CE8        | ~=8900             |
| ClojureGraalVM211CE11       | ~=10200            |
* Test variants
1. Thousand full curl GET requests to each Lambda representing the runtime with cold start simulation:
   a) Lambda with 128 MB of memory
   b) Lambda with 512 MB of memory
   c) Lambda with 1024 MB of memory
   d) Lambda with 2048 MB of memory
2. Thousand full curl GET requests to each Lambda representing the runtime. Warm Lambda execution only:
   a) Lambda with 128 MB of memory
   b) Lambda with 512 MB of memory
   c) Lambda with 1024 MB of memory
   d) Lambda with 2048 MB of memory
* Raw results
1. Variant 1
   a) Lambda with 128 MB of memory
      In the test two Clojure runtimes has been ignored: ClojureJava8Runtime, ClojureJava11Runtime.
      Runtimes has been ignored, because the memory size usage exceeds 128MB.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-128-cold--yes")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[f99eb4abbd2b3d98d44e88a0f0daafe4e1a38bdf]:
	 |                                       |     mean |       std |      min |      max |      25% |      50% |      75% | status 200 in % |
	 |---------------------------------------+----------+-----------+----------+----------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-128       |  4.90988 |  0.317468 |   4.0844 |  6.44153 |  4.70436 |  4.90553 |  5.09559 |           99.6% |
	 | ClojureClojureJava11RuntimeTiered-128 |  3.46636 |  0.244351 |  2.89737 |  4.46724 |  3.27885 |  3.48608 |  3.62971 |           99.5% |
	 | ClojureClojureJava8Runtime-128        |  5.21273 |  0.389268 |  4.21188 |  6.80188 |  4.92676 |  5.17007 |  5.45463 |           99.5% |
	 | ClojureClojureJava8RuntimeTiered-128  |  3.63801 |  0.251178 |  3.09481 |  4.85363 |  3.48209 |  3.63023 |   3.7844 |           99.6% |
	 | ClojureGraalVM211CE11-128             | 0.777105 |  0.116017 | 0.608059 |  1.34646 | 0.699478 | 0.739737 | 0.822856 |          100.0% |
	 | ClojureGraalVM211CE8-128              | 0.778442 |  0.116025 | 0.603823 |   1.4594 |  0.69901 | 0.740988 | 0.832955 |          100.0% |
	 | ClojureOnBabashkaRuntime-128          |  1.27612 |  0.108295 |   1.0472 |  1.69143 |  1.19261 |  1.26734 |  1.34532 |          100.0% |
	 | CsharpRuntime-128                     |  4.26561 |  0.167551 |  3.65622 |  4.91009 |  4.14332 |  4.25825 |  4.36209 |          100.0% |
	 | GolangRuntime-128                     |  4.93261 |  0.153144 |  4.59882 |  5.57946 |  4.82611 |  4.92748 |  5.02557 |          100.0% |
	 | HaskellRuntime-128                    | 0.495249 | 0.0953261 | 0.369421 | 0.953195 | 0.433635 | 0.461402 | 0.519225 |          100.0% |
	 | Java11Runtime-128                     | 0.802278 |  0.120786 | 0.621967 |  1.52329 | 0.716924 | 0.767513 | 0.854894 |          100.0% |
	 | Java8Runtime-128                      |  0.63156 |  0.118338 | 0.449002 |  1.40646 | 0.551601 | 0.590213 | 0.683046 |          100.0% |
	 | JavaGraalVM211CE11-128                | 0.830719 |  0.109054 | 0.655662 |  1.30314 | 0.751406 | 0.795318 | 0.886124 |          100.0% |
	 | JavaGraalVM211CE8-128                 |  0.79041 |  0.106763 | 0.630931 |  1.22947 | 0.709222 | 0.755681 | 0.853571 |          100.0% |
	 | Nodejs10Runtime-128                   | 0.533473 | 0.0938903 | 0.410479 | 0.904425 | 0.471721 | 0.500674 | 0.564902 |          100.0% |
	 | Nodejs12Runtime-128                   | 0.501893 | 0.0942564 | 0.386124 |  1.08131 | 0.440193 | 0.468531 | 0.530596 |          100.0% |
	 | Nodejs14Runtime-128                   | 0.505511 | 0.0955143 | 0.369251 |  1.01084 |  0.44524 | 0.475097 | 0.526858 |          100.0% |
	 | PythonRuntime27-128                   | 0.396074 | 0.0878231 | 0.285585 | 0.962381 | 0.342952 | 0.364317 | 0.409595 |          100.0% |
	 | PythonRuntime38-128                   | 0.494242 | 0.0991799 | 0.365842 |  1.04877 | 0.429268 | 0.459148 | 0.526572 |          100.0% |
	 | RubyRuntime25-128                     | 0.485346 | 0.0933085 | 0.331401 |  1.06657 | 0.422935 | 0.455778 |  0.51764 |          100.0% |
	 | RubyRuntime27-128                     | 0.513761 | 0.0963435 | 0.382749 |  1.09313 | 0.453807 | 0.482876 | 0.539947 |          100.0% |
	 | RustRuntime-128                       |  0.44318 | 0.0899988 | 0.314023 | 0.995236 | 0.383697 | 0.413132 | 0.470302 |          100.0% |


      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-128-cold--yes", "Boxplot of all functions M=128MB, Coldstart=yes")
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/memory-128-cold--yesall.png]]
         #+END_CENTER

         *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-128-cold--yes")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups)
       #+end_src

        #+BEGIN_CENTER
        [[./results/img/ClojureClojureJava11Runtime-128cold.png]]
        [[./results/img/ClojureClojureJava8Runtime-128cold.png]]
        [[./results/img/ClojureGraalVM211CE11-128cold.png]]
        [[./results/img/ClojureGraalVM211CE8-128cold.png]]
        [[./results/img/ClojureOnBabashkaRuntime-128cold.png]]
        [[./results/img/CsharpRuntime-128cold.png]]
        [[./results/img/GolangRuntime-128cold.png]]
        [[./results/img/HaskellRuntime-128cold.png]]
        [[./results/img/Java11Runtime-128cold.png]]
        [[./results/img/Java8Runtime-128cold.png]]
        [[./results/img/JavaGraalVM211CE11-128cold.png]]
        [[./results/img/JavaGraalVM211CE8-128cold.png]]
        [[./results/img/Nodejs10Runtime-128cold.png]]
        [[./results/img/Nodejs12Runtime-128cold.png]]
        [[./results/img/Nodejs14Runtime-128cold.png]]
        [[./results/img/PythonRuntime27-128cold.png]]
        [[./results/img/PythonRuntime38-128cold.png]]
        [[./results/img/RubyRuntime25-128cold.png]]
        [[./results/img/RubyRuntime27-128cold.png]]
        [[./results/img/RustRuntime-128cold.png]]
        #+END_CENTER

   b) Lambda with 512 MB of memory
      In the test two Clojure runtimes has been ignored: ClojureJava8Runtime, ClojureJava11Runtime. Runtimes has been ignored, because the memory size usage exceeds 128MB.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-512-cold--yes")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[26db777485f6056249d7388fd50aaee195130e13]:
	 |                                       |     mean |       std |      min |      max |      25% |      50% |      75% | status 200 in % |
	 |---------------------------------------+----------+-----------+----------+----------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-512       |  3.52947 |  0.269656 |  2.91128 |    4.796 |  3.35982 |  3.52304 |  3.67256 |           99.6% |
	 | ClojureClojureJava11RuntimeTiered-512 |  2.50029 |  0.249224 |  1.91057 |  3.56823 |  2.32467 |  2.51893 |  2.65332 |           99.6% |
	 | ClojureClojureJava8Runtime-512        |  3.60212 |  0.269788 |  2.97111 |  4.80827 |  3.42666 |  3.57725 |  3.74541 |           99.6% |
	 | ClojureClojureJava8RuntimeTiered-512  |  2.62544 |  0.244625 |  2.10785 |  3.57667 |   2.4589 |  2.63394 |  2.75937 |           99.7% |
	 | ClojureGraalVM211CE11-512             | 0.775327 |  0.120629 | 0.603627 |  1.33967 | 0.688195 |   0.7402 | 0.832272 |          100.0% |
	 | ClojureGraalVM211CE8-512              | 0.774601 |  0.119334 | 0.606556 |  1.36037 | 0.688168 | 0.736588 | 0.835118 |          100.0% |
	 | ClojureOnBabashkaRuntime-512          |  1.03894 |  0.117252 | 0.810452 |   1.4968 | 0.947307 |  1.03561 |   1.1138 |          100.0% |
	 | CsharpRuntime-512                     |  1.49214 |  0.132304 |  1.24332 |  2.15712 |  1.38969 |  1.47076 |   1.5696 |          100.0% |
	 | GolangRuntime-512                     |  4.90836 |  0.141842 |  4.57591 |  5.44373 |  4.81445 |  4.90556 |  4.97931 |          100.0% |
	 | HaskellRuntime-512                    | 0.502239 |  0.100928 | 0.374865 |  1.06655 | 0.434825 | 0.467105 | 0.536173 |          100.0% |
	 | Java11Runtime-512                     | 0.801952 |  0.119361 | 0.617442 |  1.37648 | 0.713774 | 0.765502 | 0.861483 |          100.0% |
	 | Java8Runtime-512                      | 0.632588 |  0.112081 | 0.458565 |  1.24395 | 0.554285 |  0.59434 | 0.692535 |          100.0% |
	 | JavaGraalVM211CE11-512                | 0.826579 |  0.117502 | 0.659515 |  1.38481 | 0.742441 | 0.788928 | 0.889136 |          100.0% |
	 | JavaGraalVM211CE8-512                 | 0.786416 |  0.111862 | 0.607291 |  1.20823 | 0.704046 | 0.751926 | 0.845404 |          100.0% |
	 | Nodejs10Runtime-512                   | 0.541757 | 0.0992073 | 0.410098 |  1.13754 | 0.473921 | 0.509495 | 0.578547 |          100.0% |
	 | Nodejs12Runtime-512                   |  0.50472 | 0.0944189 | 0.382236 |  1.04292 | 0.442684 |  0.47448 | 0.536971 |          100.0% |
	 | Nodejs14Runtime-512                   |  0.51042 | 0.0956968 | 0.385393 |  1.06475 | 0.449024 | 0.478419 | 0.540734 |          100.0% |
	 | PythonRuntime27-512                   | 0.396848 | 0.0889055 | 0.287671 | 0.936253 | 0.341359 | 0.364599 | 0.419638 |          100.0% |
	 | PythonRuntime38-512                   | 0.493236 | 0.0937295 | 0.361494 | 0.945132 | 0.430356 | 0.461929 | 0.523081 |          100.0% |
	 | RubyRuntime25-512                     | 0.487656 | 0.0963141 | 0.358048 |  1.04651 | 0.426487 | 0.454773 | 0.512442 |          100.0% |
	 | RubyRuntime27-512                     |  0.51636 | 0.0988495 | 0.383519 |  1.08434 | 0.450547 | 0.480036 |  0.55202 |          100.0% |
	 | RustRuntime-512                       | 0.445613 | 0.0891878 | 0.317023 | 0.824105 | 0.384787 | 0.414933 | 0.480772 |          100.0% |

      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-512-cold--yes", "Boxplot of all functions M=512MB, Coldstart=yes")
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/memory-512-cold--yesall.png]]
         #+END_CENTER

         *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-512-cold--yes")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups)
       #+end_src

        #+BEGIN_CENTER
        [[./results/img/ClojureClojureJava11Runtime-512cold.png]]
        [[./results/img/ClojureClojureJava8Runtime-512cold.png]]
        [[./results/img/ClojureGraalVM211CE11-512cold.png]]
        [[./results/img/ClojureGraalVM211CE8-512cold.png]]
        [[./results/img/ClojureOnBabashkaRuntime-512cold.png]]
        [[./results/img/CsharpRuntime-512cold.png]]
        [[./results/img/GolangRuntime-512cold.png]]
        [[./results/img/HaskellRuntime-512cold.png]]
        [[./results/img/Java11Runtime-512cold.png]]
        [[./results/img/Java8Runtime-512cold.png]]
        [[./results/img/JavaGraalVM211CE11-512cold.png]]
        [[./results/img/JavaGraalVM211CE8-512cold.png]]
        [[./results/img/Nodejs10Runtime-512cold.png]]
        [[./results/img/Nodejs12Runtime-512cold.png]]
        [[./results/img/Nodejs14Runtime-512cold.png]]
        [[./results/img/PythonRuntime27-512cold.png]]
        [[./results/img/PythonRuntime38-512cold.png]]
        [[./results/img/RubyRuntime25-512cold.png]]
        [[./results/img/RubyRuntime27-512cold.png]]
        [[./results/img/RustRuntime-512cold.png]]
        #+END_CENTER

   c) Lambda with 1024 MB of memory
      In the test two Clojure runtimes has been ignored: ClojureJava8Runtime, ClojureJava11Runtime. Runtimes has been ignored, because the memory size usage exceeds 128MB.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-1024-cold--yes")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[c5525f0a33fe6cd39e775c7c3561f5b54d95c2f3]:
	 |                                        |     mean |      std |      min |     max |      25% |      50% |      75% | status 200 in % |
	 |----------------------------------------+----------+----------+----------+---------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-1024       |  3.36645 |  1.13659 |  0.31881 | 18.2044 |  2.97407 |  3.16682 |  3.30472 |          100.0% |
	 | ClojureClojureJava11RuntimeTiered-1024 |  2.22651 | 0.262903 | 0.228986 | 4.92461 |  2.01665 |  2.25498 |  2.37443 |          100.0% |
	 | ClojureClojureJava8Runtime-1024        |  3.32426 |  1.12626 |  0.19602 | 17.6994 |   2.9571 |  3.12906 |  3.26439 |          100.0% |
	 | ClojureClojureJava8RuntimeTiered-1024  |  2.28794 | 0.260948 | 0.237835 |  4.3893 |   2.1065 |  2.30848 |  2.43066 |          100.0% |
	 | ClojureGraalVM211CE11-1024             |  1.40528 |  1.43247 | 0.586716 | 5.89004 | 0.689155 | 0.771153 |  1.27791 |          100.0% |
	 | ClojureGraalVM211CE8-1024              |  1.36049 |  1.39333 | 0.602205 | 5.71417 | 0.687904 | 0.768454 |  1.22731 |          100.0% |
	 | ClojureOnBabashkaRuntime-1024          |  1.21439 |  0.69666 | 0.804709 | 4.24583 | 0.932711 | 0.994268 |  1.05522 |          100.0% |
	 | CsharpRuntime-1024                     |  1.15749 | 0.528916 |   0.8212 | 5.65255 |  0.92031 | 0.977066 |  1.21704 |          100.0% |
	 | GolangRuntime-1024                     |  5.24139 |  1.09038 |   4.5587 | 8.93726 |  4.77089 |  4.84622 |  4.97525 |          100.0% |
	 | HaskellRuntime-1024                    | 0.657025 |  0.52389 | 0.374058 | 5.13352 | 0.432022 | 0.464727 | 0.699286 |          100.0% |
	 | Java11Runtime-1024                     | 0.919282 | 0.487989 | 0.621063 | 5.23554 | 0.703861 | 0.765396 | 0.934403 |          100.0% |
	 | Java8Runtime-1024                      | 0.978826 |  1.04097 | 0.455273 | 5.48466 | 0.557065 | 0.614689 | 0.900265 |          100.0% |
	 | JavaGraalVM211CE11-1024                |  1.44422 |   1.4183 | 0.646927 | 5.84971 | 0.747386 | 0.836372 |  1.30113 |          100.0% |
	 | JavaGraalVM211CE8-1024                 |  1.32661 |  1.35231 | 0.623771 | 5.64823 | 0.702913 | 0.772053 |  1.18091 |          100.0% |
	 | Nodejs10Runtime-1024                   | 0.614959 | 0.279299 | 0.402085 | 2.06597 | 0.463518 |  0.49215 | 0.620712 |          100.0% |
	 | Nodejs12Runtime-1024                   | 0.597247 |  0.28524 | 0.378149 | 2.04544 | 0.434894 | 0.468485 | 0.628355 |          100.0% |
	 | Nodejs14Runtime-1024                   | 0.591239 | 0.274282 | 0.387222 | 2.04022 | 0.442948 | 0.473023 | 0.592988 |          100.0% |
	 | PythonRuntime27-1024                   | 0.513251 | 0.335798 | 0.280968 | 4.40984 | 0.339187 | 0.364225 |  0.53192 |          100.0% |
	 | PythonRuntime38-1024                   |  0.59943 | 0.345077 | 0.360125 | 4.53273 | 0.423322 | 0.455856 | 0.625665 |          100.0% |
	 | RubyRuntime25-1024                     | 0.571561 | 0.287245 | 0.353553 | 2.20559 | 0.419758 | 0.448914 | 0.581847 |          100.0% |
	 | RubyRuntime27-1024                     | 0.624502 | 0.368428 | 0.373373 | 4.70633 | 0.445694 | 0.480279 | 0.647376 |          100.0% |
	 | RustRuntime-1024                       | 0.631884 | 0.598159 | 0.321131 | 5.08821 | 0.380808 | 0.413442 | 0.634221 |          100.0% |

      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-1024-cold--yes", "Boxplot of all functions M=1024MB, Coldstart=yes")
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/memory-1024-cold--yesall.png]]
         #+END_CENTER

         *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-1024-cold--yes")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups)
       #+end_src

        #+BEGIN_CENTER
        [[./results/img/ClojureClojureJava11Runtime-1024cold.png]]
        [[./results/img/ClojureClojureJava8Runtime-1024cold.png]]
        [[./results/img/ClojureGraalVM211CE11-1024cold.png]]
        [[./results/img/ClojureGraalVM211CE8-1024cold.png]]
        [[./results/img/ClojureOnBabashkaRuntime-1024cold.png]]
        [[./results/img/CsharpRuntime-1024cold.png]]
        [[./results/img/GolangRuntime-1024cold.png]]
        [[./results/img/HaskellRuntime-1024cold.png]]
        [[./results/img/Java11Runtime-1024cold.png]]
        [[./results/img/Java8Runtime-1024cold.png]]
        [[./results/img/JavaGraalVM211CE11-1024cold.png]]
        [[./results/img/JavaGraalVM211CE8-1024cold.png]]
        [[./results/img/Nodejs10Runtime-1024cold.png]]
        [[./results/img/Nodejs12Runtime-1024cold.png]]
        [[./results/img/Nodejs14Runtime-1024cold.png]]
        [[./results/img/PythonRuntime27-1024cold.png]]
        [[./results/img/PythonRuntime38-1024cold.png]]
        [[./results/img/RubyRuntime25-1024cold.png]]
        [[./results/img/RubyRuntime27-1024cold.png]]
        [[./results/img/RustRuntime-1024cold.png]]
        #+END_CENTER
        
   d) Lambda with 2048MB of memory
      All possible runtimes are included.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-2048-cold--yes")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[267ecd465b2ad46865c488f98b0c3d4c29dce3ba]:
	 |                                        |     mean |      std |      min |     max |      25% |      50% |      75% | status 200 in % |
	 |----------------------------------------+----------+----------+----------+---------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-2048       |  2.97934 | 0.305558 |  2.35627 | 6.23715 |  2.75644 |  2.97813 |  3.14606 |           99.9% |
	 | ClojureClojureJava11RuntimeTiered-2048 |  2.14507 | 0.270302 |   1.6662 |  4.2253 |  1.92348 |  2.16617 |  2.30427 |           99.9% |
	 | ClojureClojureJava8Runtime-2048        |   2.7603 | 0.312006 |   0.2092 | 6.02485 |  2.56879 |  2.76506 |  2.90171 |          100.0% |
	 | ClojureClojureJava8RuntimeTiered-2048  |  2.17027 | 0.318095 |       -1 | 5.59403 |  1.96743 |  2.18556 |  2.30797 |           99.9% |
	 | ClojureGraalVM211CE11-2048             |  1.39295 |  1.47731 | 0.586302 | 6.26732 | 0.683427 | 0.759486 |  1.19435 |          100.0% |
	 | ClojureGraalVM211CE8-2048              |  1.43352 |  1.53044 | 0.601307 | 6.17938 | 0.684293 | 0.750363 |  1.21159 |          100.0% |
	 | ClojureJava11Runtime-2048              |  4.30164 |  1.62848 |  3.16741 | 9.53551 |  3.51093 |  3.64533 |   4.0512 |          100.0% |
	 | ClojureJava8Runtime-2048               |  3.98749 |   1.6312 |  2.81642 | 9.44418 |  3.22416 |  3.34342 |  3.71174 |          100.0% |
	 | ClojureOnBabashkaRuntime-2048          |   1.3366 | 0.881247 | 0.780058 | 4.66707 | 0.939583 |  1.02046 |  1.11885 |          100.0% |
	 | CsharpRuntime-2048                     | 0.954278 | 0.498195 | 0.674211 |  5.4533 | 0.745688 | 0.794178 | 0.975116 |          100.0% |
	 | GolangRuntime-2048                     |  5.37647 |  1.23689 |  4.56457 | 9.33388 |  4.79242 |  4.86713 |   5.0314 |          100.0% |
	 | HaskellRuntime-2048                    | 0.944637 |  1.25769 | 0.376664 | 5.45453 | 0.434415 | 0.468842 | 0.760983 |          100.0% |
	 | Java11Runtime-2048                     |   1.2425 |  1.29723 | 0.615552 | 5.70704 | 0.691166 |   0.7554 |  1.05878 |          100.0% |
	 | Java8Runtime-2048                      |  1.12245 |  1.31426 |       -1 | 5.69256 | 0.557118 |  0.60118 | 0.989592 |           99.9% |
	 | JavaGraalVM211CE11-2048                |  1.34834 |  1.36496 | 0.632538 | 5.96589 | 0.739123 |   0.7994 |  1.14098 |          100.0% |
	 | JavaGraalVM211CE8-2048                 |  1.46387 |  1.55524 |   0.5993 | 6.53289 | 0.697774 | 0.759916 |  1.19597 |          100.0% |
	 | Nodejs10Runtime-2048                   | 0.621477 | 0.344925 | 0.400507 | 4.66429 | 0.463118 | 0.491526 | 0.617317 |          100.0% |
	 | Nodejs12Runtime-2048                   | 0.634559 | 0.497761 | 0.372049 |  5.1668 | 0.435652 | 0.467707 | 0.602701 |          100.0% |
	 | Nodejs14Runtime-2048                   | 0.633727 | 0.430799 | 0.372838 | 5.20183 | 0.442149 | 0.475561 | 0.653626 |          100.0% |
	 | PythonRuntime27-2048                   | 0.530443 | 0.488467 | 0.285741 | 5.11973 | 0.339708 | 0.363233 | 0.490204 |          100.0% |
	 | PythonRuntime38-2048                   | 0.576295 | 0.297033 | 0.352728 | 4.13077 | 0.425913 | 0.458038 | 0.564474 |          100.0% |
	 | RubyRuntime25-2048                     | 0.578372 | 0.324729 | 0.358704 | 4.58618 |   0.4192 | 0.447618 | 0.550013 |          100.0% |
	 | RubyRuntime27-2048                     | 0.600237 | 0.284012 | 0.374218 | 2.37509 | 0.444613 | 0.478494 | 0.589735 |          100.0% |
	 | RustRuntime-2048                       | 0.976868 |   1.3904 | 0.321094 | 5.57102 | 0.382666 | 0.413257 | 0.753409 |          100.0% |

      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-2048-cold--yes", "Boxplot of all functions M=2048MB, Coldstart=yes")
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/memory-2048-cold--yesall.png]]
         #+END_CENTER

         *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-2048-cold--yes")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups)
         #+end_src
       
        #+BEGIN_CENTER
        [[./results/img/ClojureClojureJava11Runtime-2048cold.png]]
        [[./results/img/ClojureClojureJava8Runtime-2048cold.png]]
        [[./results/img/ClojureGraalVM211CE11-2048cold.png]]
        [[./results/img/ClojureGraalVM211CE8-2048cold.png]]
        [[./results/img/ClojureOnBabashkaRuntime-2048cold.png]]
        [[./results/img/CsharpRuntime-2048cold.png]]
        [[./results/img/GolangRuntime-2048cold.png]]
        [[./results/img/HaskellRuntime-2048cold.png]]
        [[./results/img/Java11Runtime-2048cold.png]]
        [[./results/img/Java8Runtime-2048cold.png]]
        [[./results/img/JavaGraalVM211CE11-2048cold.png]]
        [[./results/img/JavaGraalVM211CE8-2048cold.png]]
        [[./results/img/Nodejs10Runtime-2048cold.png]]
        [[./results/img/Nodejs12Runtime-2048cold.png]]
        [[./results/img/Nodejs14Runtime-2048cold.png]]
        [[./results/img/PythonRuntime27-2048cold.png]]
        [[./results/img/PythonRuntime38-2048cold.png]]
        [[./results/img/RubyRuntime25-2048cold.png]]
        [[./results/img/RubyRuntime27-2048cold.png]]
        [[./results/img/RustRuntime-2048cold.png]]
        #+END_CENTER
        
2. Variant 2
   a) Lambda with 128 MB of memory
      In the test two Clojure runtimes has been ignored: ClojureJava8Runtime, ClojureJava11Runtime.
      Runtimes has been ignored, because the memory size usage exceeds 128MB.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-128-cold--no")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[52ad397a62aad16f56dd2abcd61dbb536b8bf92e]:
	 |                                       |     mean |       std |      min |      max |      25% |      50% |      75% | status 200 in % |
	 |---------------------------------------+----------+-----------+----------+----------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-128       |   0.3855 |  0.127072 | 0.224779 |  1.12871 | 0.303415 | 0.336821 | 0.436888 |          100.0% |
	 | ClojureClojureJava11RuntimeTiered-128 | 0.390112 |  0.128103 | 0.240021 |  1.11713 | 0.307164 | 0.338022 | 0.445678 |          100.0% |
	 | ClojureClojureJava8Runtime-128        | 0.320541 | 0.0996134 | 0.193702 | 0.899914 | 0.253642 | 0.291156 | 0.350359 |          100.0% |
	 | ClojureClojureJava8RuntimeTiered-128  | 0.367066 |  0.108136 | 0.212605 | 0.934313 | 0.296582 | 0.331558 | 0.406811 |          100.0% |
	 | ClojureGraalVM211CE11-128             | 0.309127 |   0.10483 | 0.172608 | 0.982413 | 0.241335 | 0.275929 | 0.338582 |          100.0% |
	 | ClojureGraalVM211CE8-128              | 0.375414 |  0.116741 | 0.214749 | 0.920598 | 0.299092 | 0.330723 | 0.418968 |          100.0% |
	 | ClojureOnBabashkaRuntime-128          | 0.389648 |  0.126757 | 0.233808 |  1.08471 | 0.306355 | 0.335069 | 0.444421 |          100.0% |
	 | CsharpRuntime-128                     | 0.356877 |  0.105933 | 0.181759 | 0.851053 |  0.29025 | 0.322528 | 0.396913 |          100.0% |
	 | GolangRuntime-128                     | 0.343877 |  0.109964 | 0.186073 |  1.03035 | 0.273514 | 0.312825 | 0.379621 |          100.0% |
	 | HaskellRuntime-128                    | 0.379583 |  0.122559 | 0.199435 |  1.04466 | 0.299388 | 0.331164 | 0.427482 |          100.0% |
	 | Java11Runtime-128                     | 0.378549 |  0.125963 | 0.209511 |  1.16437 | 0.298437 | 0.328766 |  0.42423 |          100.0% |
	 | Java8Runtime-128                      |  0.38392 |  0.126028 | 0.176963 |  1.10225 |  0.30366 | 0.334004 | 0.431535 |          100.0% |
	 | JavaGraalVM211CE11-128                | 0.350163 |  0.115198 | 0.186874 |  1.12247 | 0.279203 | 0.318719 | 0.383795 |          100.0% |
	 | JavaGraalVM211CE8-128                 | 0.305591 |  0.105521 | 0.173112 | 0.915291 | 0.235215 | 0.270971 |  0.33678 |          100.0% |
	 | Nodejs10Runtime-128                   |  0.37497 |  0.118291 | 0.212375 |   1.0184 | 0.298668 | 0.331569 | 0.412553 |          100.0% |
	 | Nodejs12Runtime-128                   | 0.327761 |  0.104622 | 0.186369 | 0.886587 | 0.257198 | 0.303451 | 0.362252 |          100.0% |
	 | Nodejs14Runtime-128                   | 0.346969 |  0.107732 | 0.187367 | 0.944356 | 0.277928 | 0.312081 | 0.380987 |          100.0% |
	 | PythonRuntime27-128                   | 0.379833 |  0.120104 | 0.217203 | 0.977981 | 0.300337 | 0.331067 | 0.433847 |          100.0% |
	 | PythonRuntime38-128                   | 0.306507 |  0.109936 | 0.184855 |  1.00847 | 0.235879 | 0.269254 | 0.336101 |          100.0% |
	 | RubyRuntime25-128                     | 0.347371 |  0.101273 | 0.192205 | 0.850099 | 0.280906 | 0.317789 |  0.38354 |          100.0% |
	 | RubyRuntime27-128                     | 0.385044 |  0.119278 | 0.224737 |  1.02913 | 0.306523 | 0.335905 | 0.437847 |          100.0% |
	 | RustRuntime-128                       | 0.346516 |  0.109695 | 0.180404 | 0.980337 | 0.277646 | 0.314024 | 0.380203 |          100.0% |

      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-128-cold--no", "Boxplot of all functions M=128MB, Coldstart=no")
         #+end_src
         
         #+BEGIN_CENTER
         [[./results/img/memory-128-cold--noall.png]]
         #+END_CENTER
         
        *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-128-cold--no")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups, coldstarts=False)
         #+end_src
         
         #+BEGIN_CENTER
         [[./results/img/ClojureClojureJava11Runtime-128warm.png]]
         [[./results/img/ClojureClojureJava8Runtime-128warm.png]]
         [[./results/img/ClojureGraalVM211CE11-128warm.png]]
         [[./results/img/ClojureGraalVM211CE8-128warm.png]]
         [[./results/img/ClojureOnBabashkaRuntime-128warm.png]]
         [[./results/img/CsharpRuntime-128warm.png]]
         [[./results/img/GolangRuntime-128warm.png]]
         [[./results/img/HaskellRuntime-128warm.png]]
         [[./results/img/Java11Runtime-128warm.png]]
         [[./results/img/Java8Runtime-128warm.png]]
         [[./results/img/JavaGraalVM211CE11-128warm.png]]
         [[./results/img/JavaGraalVM211CE8-128warm.png]]
         [[./results/img/Nodejs10Runtime-128warm.png]]
         [[./results/img/Nodejs12Runtime-128warm.png]]
         [[./results/img/Nodejs14Runtime-128warm.png]]
         [[./results/img/PythonRuntime27-128warm.png]]
         [[./results/img/PythonRuntime38-128warm.png]]
         [[./results/img/RubyRuntime25-128warm.png]]
         [[./results/img/RubyRuntime27-128warm.png]]
         [[./results/img/RustRuntime-128warm.png]]
         #+END_CENTER
         
   b) Lambda with 512 MB of memory
      In the test two Clojure runtimes has been ignored: ClojureJava8Runtime, ClojureJava11Runtime.
      Runtimes has been ignored, because the memory size usage exceeds 128MB.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-512-cold--no")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[2464254e66274d609bed0b0a83dd951191708db4]:
	 |                                       |     mean |      std |      min |      max |      25% |      50% |      75% | status 200 in % |
	 |---------------------------------------+----------+----------+----------+----------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-512       | 0.321247 | 0.122377 |  0.17799 |  1.11962 | 0.248141 | 0.288717 | 0.344379 |          100.0% |
	 | ClojureClojureJava11RuntimeTiered-512 | 0.357867 |  0.10903 | 0.198455 |  1.04263 | 0.290613 | 0.327941 | 0.390665 |          100.0% |
	 | ClojureClojureJava8Runtime-512        | 0.358645 | 0.110701 | 0.194767 |  1.07439 | 0.287857 | 0.325322 |  0.39358 |          100.0% |
	 | ClojureClojureJava8RuntimeTiered-512  |  0.33263 | 0.115129 | 0.180117 |     1.13 | 0.260612 | 0.303464 | 0.361768 |          100.0% |
	 | ClojureGraalVM211CE11-512             | 0.389269 |  0.12296 | 0.228605 |   1.0132 | 0.309301 | 0.338557 | 0.436565 |          100.0% |
	 | ClojureGraalVM211CE8-512              | 0.344466 | 0.105468 |   0.1719 | 0.964815 | 0.278396 | 0.318152 | 0.373028 |          100.0% |
	 | ClojureOnBabashkaRuntime-512          | 0.385985 | 0.114898 | 0.229387 | 0.989148 | 0.309074 | 0.342643 | 0.425427 |          100.0% |
	 | CsharpRuntime-512                     |  0.35779 | 0.110001 |   0.1957 |  1.14192 | 0.287744 | 0.329402 | 0.388892 |          100.0% |
	 | GolangRuntime-512                     | 0.387733 | 0.117417 | 0.218579 |  1.05667 | 0.309943 | 0.343105 | 0.434042 |          100.0% |
	 | HaskellRuntime-512                    | 0.386162 | 0.119157 | 0.224305 | 0.952474 | 0.308206 | 0.337035 |  0.42868 |          100.0% |
	 | Java11Runtime-512                     | 0.362061 | 0.113548 | 0.183088 |  1.02782 |  0.29492 | 0.327863 |  0.39203 |          100.0% |
	 | Java8Runtime-512                      | 0.387107 | 0.118474 | 0.204987 | 0.982825 | 0.309152 | 0.341361 | 0.427934 |          100.0% |
	 | JavaGraalVM211CE11-512                | 0.393049 | 0.125308 | 0.247605 |   1.0464 | 0.307402 | 0.343983 | 0.447881 |          100.0% |
	 | JavaGraalVM211CE8-512                 | 0.318283 | 0.112656 |  0.17827 |  1.08628 | 0.247311 | 0.289502 | 0.345787 |          100.0% |
	 | Nodejs10Runtime-512                   |  0.32233 |  0.10358 |  0.18755 | 0.852069 | 0.256012 | 0.295196 | 0.355498 |          100.0% |
	 | Nodejs12Runtime-512                   |  0.38651 | 0.118126 | 0.213986 |  1.05769 | 0.309296 | 0.343982 | 0.426356 |          100.0% |
	 | Nodejs14Runtime-512                   | 0.391733 | 0.124145 | 0.232113 |  1.02219 |  0.30724 | 0.342141 | 0.442157 |          100.0% |
	 | PythonRuntime27-512                   | 0.395355 | 0.131141 | 0.234431 |   1.0578 | 0.308697 | 0.340225 | 0.449718 |          100.0% |
	 | PythonRuntime38-512                   | 0.318014 | 0.104583 | 0.183057 | 0.886876 | 0.249465 | 0.288581 | 0.350324 |          100.0% |
	 | RubyRuntime25-512                     | 0.373595 | 0.117667 |  0.16683 |  1.00011 | 0.299759 | 0.335182 | 0.410021 |          100.0% |
	 | RubyRuntime27-512                     | 0.362254 | 0.118303 | 0.184282 |  1.08205 | 0.292955 | 0.325421 | 0.392409 |          100.0% |
	 | RustRuntime-512                       | 0.378437 | 0.115554 | 0.208969 | 0.979145 | 0.304206 | 0.338312 | 0.414661 |          100.0% |

      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-512-cold--no", "Boxplot of all functions M=512MB, Coldstart=no")
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/memory-512-cold--noall.png]]
         #+END_CENTER
         
        *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-512-cold--no")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups, coldstarts=False)
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/ClojureClojureJava11Runtime-512warm.png]]
         [[./results/img/ClojureClojureJava8Runtime-512warm.png]]
         [[./results/img/ClojureGraalVM211CE11-512warm.png]]
         [[./results/img/ClojureGraalVM211CE8-512warm.png]]
         [[./results/img/ClojureOnBabashkaRuntime-512warm.png]]
         [[./results/img/CsharpRuntime-512warm.png]]
         [[./results/img/GolangRuntime-512warm.png]]
         [[./results/img/HaskellRuntime-512warm.png]]
         [[./results/img/Java11Runtime-512warm.png]]
         [[./results/img/Java8Runtime-512warm.png]]
         [[./results/img/JavaGraalVM211CE11-512warm.png]]
         [[./results/img/JavaGraalVM211CE8-512warm.png]]
         [[./results/img/Nodejs10Runtime-512warm.png]]
         [[./results/img/Nodejs12Runtime-512warm.png]]
         [[./results/img/Nodejs14Runtime-512warm.png]]
         [[./results/img/PythonRuntime27-512warm.png]]
         [[./results/img/PythonRuntime38-512warm.png]]
         [[./results/img/RubyRuntime25-512warm.png]]
         [[./results/img/RubyRuntime27-512warm.png]]
         [[./results/img/RustRuntime-512warm.png]]
         #+END_CENTER

   c) Lambda with 1024 MB of memory
      In the test two Clojure runtimes has been ignored: ClojureJava8Runtime, ClojureJava11Runtime.
      Runtimes has been ignored, because the memory size usage exceeds 128MB.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-1024-cold--no")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[94e559c514f994081fe58b3f2c0984d173a7408b]:
	 |                                        |     mean |      std |      min |     max |      25% |      50% |      75% | status 200 in % |
	 |----------------------------------------+----------+----------+----------+---------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-1024       |  0.44129 | 0.209702 | 0.218641 | 1.57943 | 0.313859 | 0.369594 | 0.501246 |          100.0% |
	 | ClojureClojureJava11RuntimeTiered-1024 | 0.398254 | 0.178614 | 0.180057 | 1.44693 | 0.294024 | 0.340727 | 0.437185 |          100.0% |
	 | ClojureClojureJava8Runtime-1024        |  0.43451 | 0.189679 | 0.220877 | 1.44353 | 0.313106 | 0.366048 | 0.506577 |          100.0% |
	 | ClojureClojureJava8RuntimeTiered-1024  | 0.425084 | 0.189031 | 0.212485 | 1.54118 | 0.309144 | 0.359664 | 0.485088 |          100.0% |
	 | ClojureGraalVM211CE11-1024             | 0.458183 | 0.234324 |  0.21741 |   1.844 | 0.316734 | 0.372652 | 0.523239 |          100.0% |
	 | ClojureGraalVM211CE8-1024              | 0.417829 | 0.189184 | 0.192126 | 1.40671 | 0.309916 | 0.352655 | 0.463353 |          100.0% |
	 | ClojureOnBabashkaRuntime-1024          | 0.433661 | 0.204765 |  0.21498 | 1.54753 | 0.312845 | 0.363461 |  0.48762 |          100.0% |
	 | CsharpRuntime-1024                     | 0.455432 | 0.223959 | 0.235278 | 1.62962 | 0.317121 | 0.375415 | 0.521617 |          100.0% |
	 | GolangRuntime-1024                     | 0.389881 | 0.183602 | 0.201141 | 1.45643 | 0.284702 | 0.337615 | 0.419064 |          100.0% |
	 | HaskellRuntime-1024                    |  0.37552 | 0.206656 | 0.179409 |  1.5388 | 0.264485 | 0.316454 | 0.392968 |          100.0% |
	 | Java11Runtime-1024                     |  0.35391 | 0.198913 | 0.183527 | 1.56547 | 0.245584 | 0.303432 | 0.369834 |          100.0% |
	 | Java8Runtime-1024                      | 0.389976 | 0.174663 | 0.178749 | 1.46117 | 0.288482 | 0.334905 | 0.429794 |          100.0% |
	 | JavaGraalVM211CE11-1024                | 0.361644 | 0.223795 | 0.180549 | 1.60334 | 0.244085 | 0.301901 | 0.364708 |          100.0% |
	 | JavaGraalVM211CE8-1024                 | 0.361778 | 0.206281 | 0.183523 | 1.57105 | 0.252155 | 0.306605 | 0.376836 |          100.0% |
	 | Nodejs10Runtime-1024                   | 0.349608 | 0.188329 | 0.182304 | 1.46541 | 0.246439 | 0.300781 | 0.367223 |          100.0% |
	 | Nodejs12Runtime-1024                   | 0.436175 | 0.205472 | 0.221065 |  1.6448 | 0.311391 | 0.366672 | 0.495493 |          100.0% |
	 | Nodejs14Runtime-1024                   | 0.397963 | 0.202715 | 0.188828 | 1.63094 | 0.289215 | 0.336848 | 0.425721 |          100.0% |
	 | PythonRuntime27-1024                   | 0.457415 | 0.232039 | 0.229159 | 1.72454 | 0.318152 |    0.367 | 0.527081 |          100.0% |
	 | PythonRuntime38-1024                   |  0.43795 | 0.206787 | 0.227265 | 1.55788 |  0.31175 | 0.364204 | 0.496868 |          100.0% |
	 | RubyRuntime25-1024                     | 0.379772 | 0.181957 | 0.183376 | 1.46143 | 0.280118 | 0.328376 |  0.40968 |          100.0% |
	 | RubyRuntime27-1024                     | 0.445906 | 0.212471 | 0.230908 | 1.61203 | 0.316001 | 0.371086 | 0.511428 |          100.0% |
	 | RustRuntime-1024                       | 0.415385 | 0.222845 | 0.197082 |  1.7065 | 0.301925 | 0.347179 | 0.448557 |          100.0% |

      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-1024-cold--no", "Boxplot of all functions M=1024MB, Coldstart=no")
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/memory-1024-cold--noall.png]]
         #+END_CENTER

        *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-1024-cold--no")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups, coldstarts=False)
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/ClojureClojureJava11Runtime-1024warm.png]]
         [[./results/img/ClojureClojureJava8Runtime-1024warm.png]]
         [[./results/img/ClojureGraalVM211CE11-1024warm.png]]
         [[./results/img/ClojureGraalVM211CE8-1024warm.png]]
         [[./results/img/ClojureOnBabashkaRuntime-1024warm.png]]
         [[./results/img/CsharpRuntime-1024warm.png]]
         [[./results/img/GolangRuntime-1024warm.png]]
         [[./results/img/HaskellRuntime-1024warm.png]]
         [[./results/img/Java11Runtime-1024warm.png]]
         [[./results/img/Java8Runtime-1024warm.png]]
         [[./results/img/JavaGraalVM211CE11-1024warm.png]]
         [[./results/img/JavaGraalVM211CE8-1024warm.png]]
         [[./results/img/Nodejs10Runtime-1024warm.png]]
         [[./results/img/Nodejs12Runtime-1024warm.png]]
         [[./results/img/Nodejs14Runtime-1024warm.png]]
         [[./results/img/PythonRuntime27-1024warm.png]]
         [[./results/img/PythonRuntime38-1024warm.png]]
         [[./results/img/RubyRuntime25-1024warm.png]]
         [[./results/img/RubyRuntime27-1024warm.png]]
         [[./results/img/RustRuntime-1024warm.png]]
         #+END_CENTER

   d) Lambda with 2048 MB of memory
      All possible runtimes are included.

      1) Basic statistics
         #+begin_src python :session pb1 :results value raw :exports results :cache yes
ds, ds_sub,_ = file_to_dses("memory-2048-cold--no")
ds_describe_table(ds)
         #+end_src

	 #+RESULTS[1f05a4821f1bb13d0f4a0346483f4198bb3a214a]:
	 |                                        |     mean |      std |      min |      max |      25% |      50% |      75% | status 200 in % |
	 |----------------------------------------+----------+----------+----------+----------+----------+----------+----------+-----------------|
	 | ClojureClojureJava11Runtime-2048       | 0.322253 | 0.108977 | 0.178417 |  1.02178 | 0.247955 | 0.293736 | 0.355229 |          100.0% |
	 | ClojureClojureJava11RuntimeTiered-2048 | 0.423205 | 0.132688 | 0.260403 |  1.21679 | 0.330986 | 0.370219 | 0.496949 |          100.0% |
	 | ClojureClojureJava8Runtime-2048        | 0.340457 | 0.115159 | 0.175916 |  1.15271 | 0.264237 | 0.317144 | 0.375511 |          100.0% |
	 | ClojureClojureJava8RuntimeTiered-2048  | 0.397645 | 0.116694 | 0.211797 | 0.989235 | 0.319875 | 0.360731 | 0.442648 |          100.0% |
	 | ClojureGraalVM211CE11-2048             | 0.366223 | 0.109125 | 0.174912 | 0.967031 | 0.295834 | 0.338794 | 0.402311 |          100.0% |
	 | ClojureGraalVM211CE8-2048              | 0.427325 | 0.138811 | 0.230142 |  1.25734 |  0.33311 | 0.371356 | 0.494058 |          100.0% |
	 | ClojureJava11Runtime-2048              | 0.411262 | 0.123295 | 0.209299 |  1.23685 | 0.327885 | 0.369606 | 0.466892 |          100.0% |
	 | ClojureJava8Runtime-2048               |  0.32228 | 0.115382 | 0.176478 |  1.14802 |  0.24415 | 0.293836 | 0.356617 |          100.0% |
	 | ClojureOnBabashkaRuntime-2048          | 0.433665 | 0.153819 | 0.254908 |  1.39979 |  0.33409 |  0.37481 | 0.500001 |          100.0% |
	 | CsharpRuntime-2048                     | 0.356902 | 0.109141 | 0.185276 | 0.960439 | 0.285861 | 0.331594 | 0.393415 |          100.0% |
	 | GolangRuntime-2048                     |  0.40538 | 0.112385 | 0.215362 | 0.914984 |  0.32316 | 0.364608 | 0.466637 |          100.0% |
	 | HaskellRuntime-2048                    | 0.369931 | 0.117461 | 0.197533 |  1.12021 | 0.294861 |  0.33642 | 0.406594 |          100.0% |
	 | Java11Runtime-2048                     | 0.376076 | 0.112653 | 0.181131 |  1.12827 | 0.299037 | 0.345112 |   0.4148 |          100.0% |
	 | Java8Runtime-2048                      | 0.387741 | 0.109577 | 0.209472 |  1.02371 | 0.313234 | 0.358793 | 0.436942 |          100.0% |
	 | JavaGraalVM211CE11-2048                | 0.325124 | 0.103773 | 0.192618 | 0.881713 | 0.254103 | 0.295801 | 0.361488 |          100.0% |
	 | JavaGraalVM211CE8-2048                 |  0.40998 | 0.120181 | 0.198017 |  1.02678 | 0.325235 |  0.36646 | 0.476009 |          100.0% |
	 | Nodejs10Runtime-2048                   | 0.367488 | 0.107852 | 0.194411 | 0.990055 | 0.296395 | 0.339979 | 0.403867 |          100.0% |
	 | Nodejs12Runtime-2048                   | 0.412613 | 0.126718 | 0.236935 |  1.21155 | 0.325024 | 0.366812 | 0.471605 |          100.0% |
	 | Nodejs14Runtime-2048                   | 0.417948 | 0.125555 | 0.217509 |  1.10573 | 0.328171 | 0.371792 | 0.483821 |          100.0% |
	 | PythonRuntime27-2048                   |  0.41175 | 0.123325 | 0.181413 |  1.13458 |  0.32555 | 0.365654 | 0.470356 |          100.0% |
	 | PythonRuntime38-2048                   | 0.323485 |  0.11131 | 0.184386 |  1.12223 | 0.250086 | 0.294766 |  0.35291 |          100.0% |
	 | RubyRuntime25-2048                     | 0.371401 | 0.112247 | 0.196981 | 0.999423 | 0.298025 | 0.339697 | 0.411847 |          100.0% |
	 | RubyRuntime27-2048                     | 0.405108 |  0.11715 | 0.223906 |  1.04593 | 0.322358 | 0.366306 |   0.4667 |          100.0% |
	 | RustRuntime-2048                       | 0.419241 | 0.128171 | 0.243239 |  1.08902 | 0.328542 | 0.369083 | 0.485873 |          100.0% |

      2) Box plot

         *Boxplot all functions*
         #+begin_src python :session pb1 :results none :exports none :cache yes
boxplot_all("memory-2048-cold--no", "Boxplot of all functions M=2048MB, Coldstart=no")
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/memory-2048-cold--noall.png]]
         #+END_CENTER

        *Individual boxplots*
         #+begin_src python :session pb1 :results none :exports none :cache yes
ds, ds_sub,_ = file_to_dses("memory-2048-cold--no")
groups = ds.groupby(by="function_name", group_keys=True)
boxplots(groups, coldstarts=False)
         #+end_src

         #+BEGIN_CENTER
         [[./results/img/ClojureClojureJava11Runtime-2048warm.png]]
         [[./results/img/ClojureClojureJava8Runtime-2048warm.png]]
         [[./results/img/ClojureGraalVM211CE11-2048warm.png]]
         [[./results/img/ClojureGraalVM211CE8-2048warm.png]]
         [[./results/img/ClojureOnBabashkaRuntime-2048warm.png]]
         [[./results/img/CsharpRuntime-2048warm.png]]
         [[./results/img/GolangRuntime-2048warm.png]]
         [[./results/img/HaskellRuntime-2048warm.png]]
         [[./results/img/Java11Runtime-2048warm.png]]
         [[./results/img/Java8Runtime-2048warm.png]]
         [[./results/img/JavaGraalVM211CE11-2048warm.png]]
         [[./results/img/JavaGraalVM211CE8-2048warm.png]]
         [[./results/img/Nodejs10Runtime-2048warm.png]]
         [[./results/img/Nodejs12Runtime-2048warm.png]]
         [[./results/img/Nodejs14Runtime-2048warm.png]]
         [[./results/img/PythonRuntime27-2048warm.png]]
         [[./results/img/PythonRuntime38-2048warm.png]]
         [[./results/img/RubyRuntime25-2048warm.png]]
         [[./results/img/RubyRuntime27-2048warm.png]]
         [[./results/img/RustRuntime-2048warm.png]]
         #+END_CENTER
