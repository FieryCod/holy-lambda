{:deps {io.github.FieryCod/holy-lambda-babashka-tasks
        {:local/root "../../../../modules/holy-lambda-babashka-tasks"}}

 :mvn/local-repo ".holy-lambda/.m2"

 :min-bb-version "0.3.7"

 :holy-lambda/options {
                       :docker {:volumes [{:docker     "/holy-lambda"
                                           :host       "../../../../"}]

                                :network "host"

                                :image "fierycod/graalvm-native-image:ce"}

                       :build {:clj-alias nil
                               :graalvm-home nil}


                       :runtime
                       {

                        ;; Runtime `:babashka` provides a way to include native libraries called pods https://github.com/babashka/pods
                        ;; Holy lambda ships code exists to provide fast feedback loop therefore pods should be shipped using AWS Layers
                        ;; Check this template https://github.com/aws-samples/aws-lambda-layers-aws-sam-examples/blob/master/aws-sdk-layer/template.yaml
                        ;; and official docs https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-layers.html
                        ;; CodeUri should be `.holy-lambda/pods`
                        ;; For now pods should be declared in `bb.edn`. See: https://github.com/babashka/babashka/issues/768#issuecomment-825016317
                        ;;
                        ;; `IMPORTANT:` 3rd party babashka compatible libraries should be distributed as a layers (CodeUri: .holy-lambda/bb-clj-deps)
                        :pods                {}

                        ;; Native runtimes have a special environment variable $Entrypoint which is available during code execution
                        ;; :entrypoint should always point to a namespace with includes (native/entrypoint) call
                        :entrypoint          basic.example.core

                        ;; For `:native` runtime you can provide your own bootstrap file
                        :bootstrap-file      "bootstrap"

                        ;; For `:native` runtime you can provide some native resources which will be available during lambda execution
                        ;; Resources are packed as is.
                        :native-deps         "resources"

                        ;; Specify custom arguments for native image generation
                        ;; Works only on `:native` runtime.
                        ;; Check https://www.graalvm.org/reference-manual/native-image/Options/
                        :native-image-args
                        ["--verbose"
                         "--no-fallback"
                         "--enable-url-protocols=http,https"
                         "--report-unsupported-elements-at-runtime"
                         "-H:+AllowIncompleteClasspath"
                         "--no-server"
                         "--initialize-at-build-time"]}}

 :tasks {:requires              ([holy-lambda.tasks])

         docker:run             holy-lambda.tasks/docker:run

         native:conf            holy-lambda.tasks/native:conf
         native:executable      holy-lambda.tasks/native:executable

         stack:sync             holy-lambda.tasks/stack:sync
         stack:compile          holy-lambda.tasks/stack:compile
         stack:doctor           holy-lambda.tasks/stack:doctor
         stack:purge            holy-lambda.tasks/stack:purge
         stack:version          holy-lambda.tasks/stack:version
         }
 }
