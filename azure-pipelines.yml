name: $(Date:yyyyMMdd)-$(BuildID)

trigger:
  - master

pool:
  name: Default

pr: none

jobs:
  # Tasks health check
  - job: tasks_health_check_1
    displayName: '(1.0) General tasks tests'
    condition: succeeded()
    strategy:
      matrix:
        # DOCKER_GRAALVM_CE_LATEST:
        #   GRAALVM_IMAGE:

        DOCKER_GRAALVM_CE_LATEST_MINUS_ONE:
          GRAALVM_IMAGE: ghcr.io/fierycod/holy-lambda-builder:amd64-java11-21.2.0

        # DOCKER_GRAALVM_EE_LATEST:
        #   GRAALVM_IMAGE: fierycod/graalvm-native-image:ee
    variables:
      HL_DOCKER_IMAGE: $(GRAALVM_IMAGE)
      WORKING_DIRECTORY: examples/bb/native/basic.example
    steps:
      - bash: |
          # Regenerate partial cache
          bash -c "mkdir -p .holy-lambda/.m2 && cd .holy-lambda/.m2 && unzip -q ~/azure-agent/local_cache/m2-cached.zip"

          # Bucket deletion
          printf "\n------------------------------------------------------\n"
          printf "                    (1) Doctor check                      "
          printf "\n------------------------------------------------------\n"
          #------------------------
          bb hl:doctor || exit 1
          echo "------------------------------------------------------"

          # Stack version test
          printf "\n------------------------------------------------------\n"
          printf "                   (2) Stack version                      "
          printf "\n------------------------------------------------------\n"
          #------------------------
          bb hl:version || exit 1
          echo "------------------------------------------------------"

          # Basic stack compilation
          printf "\n------------------------------------------------------\n"
          printf "                   (3) Stack compilation                  "
          printf "\n------------------------------------------------------\n"
          #------------------------
          bb hl:compile || exit 1
          echo "------------------------------------------------------"

          # Basic stack compilation
          printf "\n------------------------------------------------------\n"
          printf "              (4) Stack compilation + Force               "
          printf "\n------------------------------------------------------\n"
          #------------------------
          bb hl:compile :force || exit 1
          echo "------------------------------------------------------"

          # Stack local run test
          printf "\n------------------------------------------------------\n"
          printf "           (5) In docker:run in local context fail       "
          printf "\n------------------------------------------------------\n"
          #------------------------
          HL_NO_DOCKER=true bb hl:docker:run "something" && exit 1 || printf "\033[0;32mTest passed!\033[0m\n"
          echo "------------------------------------------------------"

          # Stack purge test
          printf "\n------------------------------------------------------\n"
          printf "                 (7) Build clean                          "
          printf "\n------------------------------------------------------\n"
          #------------------------
          bb hl:clean || exit 1
          echo "------------------------------------------------------"

        workingDirectory: ${{variables.WORKING_DIRECTORY}}
        displayName: 'Tasks health check'

  # Native + Docker runtime tests
  - job: native_basic_docker_1
    displayName: '(2.1)-(Native)-(Basic)-(Docker) GraalVM Native Image Custom Runtime compilation test'
    dependsOn:
      - tasks_health_check_1
    condition: succeeded()
    strategy:
      matrix:
        DOCKER_GRAALVM_CE_LATEST_MINUS_ONE:
          GRAALVM_IMAGE: ghcr.io/fierycod/holy-lambda-builder:amd64-java11-21.2.0

    variables:
      HL_DOCKER_IMAGE: $(GRAALVM_IMAGE)
      WORKING_DIRECTORY: examples/bb/native/basic.example
    steps:
      - bash: |
          # Regenerate partial cache
          bash -c "mkdir -p .holy-lambda/.m2 && cd .holy-lambda/.m2 && unzip -q ~/azure-agent/local_cache/m2-cached.zip"
          # Sync
          bb hl:sync && \
          # Regular test tasks
          bb hl:compile && \
          bb hl:native:executable && \
          output=$(sam local invoke "ExampleLambdaFunction" 2> /dev/null | jq .body -r) && \
          echo "$output" && \
          bb -e "(assert (= \"$output\" \"Hello world\"))"

        workingDirectory: ${{variables.WORKING_DIRECTORY}}
        displayName: 'Compilation + Invoke'

  # Clojure + Docker runtime tests
  - job: clojure_basic_docker_1
    displayName: '(3.1)-(Clojure)-(Basic)-(Docker) Clojure runtime test'
    dependsOn:
      - tasks_health_check_1
    condition: succeeded()
    strategy:
      matrix:
        DOCKER_GRAALVM_CE_LATEST_MINUS_ONE:
          GRAALVM_IMAGE: ghcr.io/fierycod/holy-lambda-builder:amd64-java11-21.2.0

    variables:
      HL_DOCKER_IMAGE: $(GRAALVM_IMAGE)
      WORKING_DIRECTORY: examples/bb/clojure/basic.example
    steps:
      - script: |
          # Regenerate partial cache
          bash -c "mkdir -p .holy-lambda/.m2 && cd .holy-lambda/.m2 && unzip -q ~/azure-agent/local_cache/m2-cached.zip" && bb hl:sync && \

          # Regular test tasks
          bb hl:compile && \
          sam build && \
          output=$(sam local invoke "ExampleLambdaFunction" 2> /dev/null | jq .body -r) && \
          echo "$output" && \
          bb -e "(assert (= \"$output\" \"Hello world\"))"
        workingDirectory: ${{variables.WORKING_DIRECTORY}}
        displayName: 'Compilation + Invoke'

  - job: babashka_basic_build_1
    displayName: '(4.1) Build Babashka layer'
    dependsOn:
      - tasks_health_check_1
    condition: succeeded()
    variables:
      WORKING_DIRECTORY: modules/holy-lambda-babashka-layer
    steps:
      - script: |
          rm -Rf holy-lambda-babashka-runtime.zip && make build-artifact-in-place
          rm -Rf ~/azure-agent/local_cache/holy-lambda-babashka-runtime.zip
          cp holy-lambda-babashka-runtime.zip ~/azure-agent/local_cache/
        workingDirectory: ${{variables.WORKING_DIRECTORY}}
        displayName: 'Build holy-lambda-babashka layer'

  # Babashka based tests
  - job: babashka_basic_docker_1
    displayName: '(5.1)-(Babashka)-(Basic)-(Docker) Babashka runtime test'
    strategy:
      matrix:
        DOCKER_GRAALVM_CE_LATEST_MINUS_ONE:
          GRAALVM_IMAGE: ghcr.io/fierycod/holy-lambda-builder:amd64-java11-21.2.0

    dependsOn:
      - tasks_health_check_1
      - babashka_basic_build_1
    condition: succeeded()
    variables:
      HL_DOCKER_IMAGE: $(GRAALVM_IMAGE)
      WORKING_DIRECTORY: examples/bb/babashka/basic.example
    steps:
      - script: |
         # Regenerate partial cache
         bash -c "mkdir -p .holy-lambda/.m2 && cd .holy-lambda/.m2 && unzip -q ~/azure-agent/local_cache/m2-cached.zip" && bb hl:sync

         # Copy freshly build babashka runtime
         cp ~/azure-agent/local_cache/holy-lambda-babashka-runtime.zip . && unzip -qq holy-lambda-babashka-runtime.zip -d holy-lambda-babashka-runtime

         # Test
         output=$(sam local invoke "ExampleLambdaFunction" 2> /dev/null | jq .body -r) && \
         echo "$output" && \
         bb -e "(assert (= \"$output\" \"Hello world. Babashka is sweet friend of mine! Babashka version: 0.6.0\"))"

        workingDirectory: ${{variables.WORKING_DIRECTORY}}
        displayName: 'Basic babashka invoke'

  # Babashka based tests
  - job: babashka_basic_docker_2
    displayName: '(5.2)-(Babashka)-(Basic)-(Docker) Babashka runtime test v2'
    strategy:
      matrix:
        DOCKER_GRAALVM_CE_LATEST_MINUS_ONE:
          GRAALVM_IMAGE: ghcr.io/fierycod/holy-lambda-builder:amd64-java11-21.2.0

    dependsOn:
      - tasks_health_check_1
      - babashka_basic_build_1
    condition: succeeded()
    variables:
      HL_DOCKER_IMAGE: $(GRAALVM_IMAGE)
      WORKING_DIRECTORY: examples/bb/babashka/aws-pod.example
    steps:
      - script: |
         # Regenerate partial cache
         bash -c "mkdir -p .holy-lambda/.m2 && cd .holy-lambda/.m2 && unzip -q ~/azure-agent/local_cache/m2-cached.zip" && bb hl:sync

         # Copy freshly build babashka runtime
         cp ~/azure-agent/local_cache/holy-lambda-babashka-runtime.zip . && unzip -qq holy-lambda-babashka-runtime.zip -d holy-lambda-babashka-runtime

         # Test
         output=$(sam local invoke "ExampleLambdaFunction" 2> /dev/null | jq .body -r) && \
         echo "$output" && \
         bb -e "(assert (= \"$output\" \"true\"))"

        workingDirectory: ${{variables.WORKING_DIRECTORY}}
        displayName: 'Basic babashka invoke v2'

  # Native + Docker runtime tests
  - job: native_no_list_docker_1
    displayName: '(2.1)-(Native built-time-no-list)-(S3)-(Docker) GraalVM Native Image Custom Runtime compilation test'
    dependsOn:
      - tasks_health_check_1
    condition: succeeded()
    strategy:
      matrix:
        DOCKER_GRAALVM_CE_LATEST_MINUS_ONE:
          GRAALVM_IMAGE: ghcr.io/fierycod/holy-lambda-builder:amd64-java11-21.2.0

    variables:
      HL_DOCKER_IMAGE: $(GRAALVM_IMAGE)
      WORKING_DIRECTORY: examples/bb/native/hl.aws-bucket
    steps:
      - script: |
          # Regenerate partial cache
          bash -c "mkdir -p .holy-lambda/.m2 && cd .holy-lambda/.m2 && unzip -q ~/azure-agent/local_cache/m2-cached.zip" && bb hl:sync && \

          # Regular test tasks
          bb hl:compile && \
          bb hl:native:conf && \
          bb hl:native:executable

          # Test
          output=$(sam local invoke "ExampleLambdaFunction" 2> /dev/null | jq .body -r) && \
          echo "$output" && \
          bb -e "(assert (= \"$output\" \"true\"))"

        workingDirectory: ${{variables.WORKING_DIRECTORY}}
        displayName: 'Compilation + Invoke'
