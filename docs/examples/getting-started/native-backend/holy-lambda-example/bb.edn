{:deps {io.github.FieryCod/holy-lambda-babashka-tasks
        {:git/url                                   "https://github.com/FieryCod/holy-lambda"
         :deps/root                                 "./modules/holy-lambda-babashka-tasks"
         :sha                                       "99fb7c975498945551e1ed8651f9017532be0a58"}}

 ;; Local repositories should be downloaded to `.holy-lambda` directory
 ;; This way project artifacts are separated from global ~/.m2 and only project artifacts
 ;; are deployed to AWS Lambda
 :mvn/local-repo                                    ".holy-lambda/.m2"

 ;; Minimal babashka version which should be used in conjuction with holy-lambda
 :min-bb-version                                    "0.3.7"

 :holy-lambda/options {
                       ;; User should use docker for local development and use `HL_NO_DOCKER` environment variable
                       ;; set to "true" for CI based deployments.
                       ;; For CI based deployments user should base it's builder image on `fierycod/graalvm-native-image:ce`
                       :docker {

                                ;; Check https://docs.docker.com/network/
                                ;; Network setting for future versions of HL will propagate to AWS SAM as well
                                ;; Options: "host"|"bridge"|"overlay"|"none"|nil|"macvlan"
                                :network            nil

                                ;; HL runs bb tasks in docker context which means that local libraries will not work out-of-the-box.
                                ;;
                                ;; To make local libraries work with HL you have to:
                                ;; 1. Mount your local library folder as a docker volume.
                                ;; 2. Modify the `deps.edn` to use library path available in docker context.
                                ;; Preferably use `deps.edn` alias and reference it's name in `:build:clj-name`
                                ;; ----------------------------------------------------------------------------
                                ;; Single volume definition:
                                ;;
                                ;; {:docker "/path-where-to-mount-local-library-on-docker"
                                ;;  :host   "relative-local-library-path"}
                                :volumes            []

                                ;; GraalVM Community holy-lambda compatible docker image
                                ;; You can always build your own GraalVM image with enterprise edition
                                :image              "fierycod/graalvm-native-image:ce"}

                       :build {;; clj alias might be set via environment variable
                               ;; `HL_CLJ_ALIAS` like:  HL_CLJ_ALIAS="dev"
                               :clj-alias           nil

                               ;; Used when either :docker is nil or
                               ;; `HL_NO_DOCKER` environment variable is set to "true"
                               ;; Might be set via `GRAALVM_HOME` environment variable
                               :graalvm-home        "~/.graalvm"}

                       :runtime
                       {

                        ;; Babashka pods should be shipped using AWS Lambda Layer
                        ;; Check this template https://github.com/aws-samples/aws-lambda-layers-aws-sam-examples/blob/master/aws-sdk-layer/template.yaml
                        ;; and official docs https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-layers.html
                        ;; CodeUri should be `.holy-lambda/pods`
                        ;; For now pods should be declared in `bb.edn`. See: https://github.com/babashka/babashka/issues/768#issuecomment-825016317
                        ;;
                        ;; `IMPORTANT:` 3rd party babashka compatible libraries should be distributed as a layers (CodeUri: .holy-lambda/bb-clj-deps)
                        :pods                      {}

                        ;; Native runtimes have a special environment variable $Entrypoint which is available during code execution
                        ;; :entrypoint should always point to a namespace with includes (h/entrypoint) call
                        :entrypoint                com.company.example-lambda.core

                        ;; For `:native` runtime you can provide your own bootstrap file
                        :bootstrap-file            "bootstrap"

                        ;; For `:native` runtime you can provide some native resources which will be available during lambda execution
                        ;; Resources are packed as is.
                        :native-deps               "resources"

                        ;; Specify custom arguments for native image generation
                        ;; Check https://www.graalvm.org/reference-manual/native-image/Options/
                        :native-image-args         ["--verbose"
                                                    "--no-fallback"
                                                    "--enable-url-protocols=http,https"
                                                    "--report-unsupported-elements-at-runtime"
                                                    "-H:+AllowIncompleteClasspath"
                                                    "--no-server"
                                                    "--initialize-at-build-time=com.fasterxml.jackson"]}}

 :tasks {:requires                 ([holy-lambda.tasks])

         hl:docker:run             holy-lambda.tasks/hl:docker:run

         hl:native:conf            holy-lambda.tasks/hl:native:conf
         hl:native:executable      holy-lambda.tasks/hl:native:executable

         hl:sync                   holy-lambda.tasks/hl:sync
         hl:compile                holy-lambda.tasks/hl:compile
         hl:doctor                 holy-lambda.tasks/hl:doctor
         hl:clean                  holy-lambda.tasks/hl:clean
         hl:version                holy-lambda.tasks/hl:version}}

         
 
